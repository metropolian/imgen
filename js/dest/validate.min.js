(function(t,e,n){"use strict";var r=function(t,e,n){n=i.extend({},i.options,n);var o,s,a=i.runValidations(t,e,n);for(o in a)for(s in a[o])if(i.isPromise(a[o][s]))throw new Error("Use validate.async if you want support for promises");return r.processValidationResults(a,n)},i=r;i.extend=function(t){return[].slice.call(arguments,1).forEach(function(e){for(var n in e)t[n]=e[n]}),t},i.extend(r,{version:{major:0,minor:11,patch:1,metadata:null,toString:function(){var t=i.format("%{major}.%{minor}.%{patch}",i.version);return i.isEmpty(i.version.metadata)||(t+="+"+i.version.metadata),t}},Promise:"undefined"!=typeof Promise?Promise:null,EMPTY_STRING_REGEXP:/^\s*$/,runValidations:function(t,e,n){var r,o,s,a,u,f,l,c=[];(i.isDomElement(t)||i.isJqueryElement(t))&&(t=i.collectFormValues(t));for(r in e){s=i.getDeepObjectValue(t,r),a=i.result(e[r],s,t,r,n,e);for(o in a){if(u=i.validators[o],!u)throw l=i.format("Unknown validator %{name}",{name:o}),new Error(l);f=a[o],f=i.result(f,s,t,r,n,e),f&&c.push({attribute:r,value:s,validator:o,globalOptions:n,attributes:t,options:f,error:u.call(u,s,f,r,t,n)})}}return c},processValidationResults:function(t,e){t=i.pruneEmptyErrors(t,e),t=i.expandMultipleErrors(t,e),t=i.convertErrorMessages(t,e);var n=e.format||"grouped";if("function"!=typeof i.formatters[n])throw new Error(i.format("Unknown format %{format}",e));return t=i.formatters[n](t),i.isEmpty(t)?void 0:t},async:function(t,e,n){n=i.extend({},i.async.options,n);var r=n.wrapErrors||function(t){return t};n.cleanAttributes!==!1&&(t=i.cleanAttributes(t,e));var o=i.runValidations(t,e,n);return new i.Promise(function(s,a){i.waitForResults(o).then(function(){var u=i.processValidationResults(o,n);u?a(new r(u,n,t,e)):s(t)},function(t){a(t)})})},single:function(t,e,n){return n=i.extend({},i.single.options,n,{format:"flat",fullMessages:!1}),i({single:t},{single:e},n)},waitForResults:function(t){return t.reduce(function(t,e){return i.isPromise(e.error)?t.then(function(){return e.error.then(function(t){e.error=t||null})}):t},new i.Promise(function(t){t()}))},result:function(t){var e=[].slice.call(arguments,1);return"function"==typeof t&&(t=t.apply(null,e)),t},isNumber:function(t){return"number"==typeof t&&!isNaN(t)},isFunction:function(t){return"function"==typeof t},isInteger:function(t){return i.isNumber(t)&&t%1===0},isBoolean:function(t){return"boolean"==typeof t},isObject:function(t){return t===Object(t)},isDate:function(t){return t instanceof Date},isDefined:function(t){return null!==t&&void 0!==t},isPromise:function(t){return!!t&&i.isFunction(t.then)},isJqueryElement:function(t){return t&&i.isString(t.jquery)},isDomElement:function(t){return!!t&&(!(!t.querySelectorAll||!t.querySelector)&&(!(!i.isObject(document)||t!==document)||("object"==typeof HTMLElement?t instanceof HTMLElement:t&&"object"==typeof t&&null!==t&&1===t.nodeType&&"string"==typeof t.nodeName)))},isEmpty:function(t){var e;if(!i.isDefined(t))return!0;if(i.isFunction(t))return!1;if(i.isString(t))return i.EMPTY_STRING_REGEXP.test(t);if(i.isArray(t))return 0===t.length;if(i.isDate(t))return!1;if(i.isObject(t)){for(e in t)return!1;return!0}return!1},format:i.extend(function(t,e){return i.isString(t)?t.replace(i.format.FORMAT_REGEXP,function(t,n,r){return"%"===n?"%{"+r+"}":String(e[r])}):t},{FORMAT_REGEXP:/(%?)%\{([^\}]+)\}/g}),prettify:function(t){return i.isNumber(t)?100*t%1===0?""+t:parseFloat(Math.round(100*t)/100).toFixed(2):i.isArray(t)?t.map(function(t){return i.prettify(t)}).join(", "):i.isObject(t)?t.toString():(t=""+t,t.replace(/([^\s])\.([^\s])/g,"$1 $2").replace(/\\+/g,"").replace(/[_-]/g," ").replace(/([a-z])([A-Z])/g,function(t,e,n){return""+e+" "+n.toLowerCase()}).toLowerCase())},stringifyValue:function(t){return i.prettify(t)},isString:function(t){return"string"==typeof t},isArray:function(t){return"[object Array]"==={}.toString.call(t)},isHash:function(t){return i.isObject(t)&&!i.isArray(t)&&!i.isFunction(t)},contains:function(t,e){return!!i.isDefined(t)&&(i.isArray(t)?t.indexOf(e)!==-1:e in t)},unique:function(t){return i.isArray(t)?t.filter(function(t,e,n){return n.indexOf(t)==e}):t},forEachKeyInKeypath:function(t,e,n){if(i.isString(e)){var r,o="",s=!1;for(r=0;r<e.length;++r)switch(e[r]){case".":s?(s=!1,o+="."):(t=n(t,o,!1),o="");break;case"\\":s?(s=!1,o+="\\"):s=!0;break;default:s=!1,o+=e[r]}return n(t,o,!0)}},getDeepObjectValue:function(t,e){if(i.isObject(t))return i.forEachKeyInKeypath(t,e,function(t,e){if(i.isObject(t))return t[e]})},collectFormValues:function(t,e){var n,r,o,s,a,u,f={};if(i.isJqueryElement(t)&&(t=t[0]),!t)return f;for(e=e||{},s=t.querySelectorAll("input[name], textarea[name]"),n=0;n<s.length;++n)o=s.item(n),i.isDefined(o.getAttribute("data-ignored"))||(u=i.sanitizeFormValue(o.value,e),"number"===o.type?u=u?+u:null:"checkbox"===o.type?o.attributes.value?o.checked||(u=f[o.name]||null):u=o.checked:"radio"===o.type&&(o.checked||(u=f[o.name]||null)),f[o.name]=u);for(s=t.querySelectorAll("select[name]"),n=0;n<s.length;++n){if(o=s.item(n),o.multiple){u=[];for(r in o.options)a=o.options[r],a.selected&&u.push(i.sanitizeFormValue(a.value,e))}else u=i.sanitizeFormValue(o.options[o.selectedIndex].value,e);f[o.name]=u}return f},sanitizeFormValue:function(t,e){return e.trim&&i.isString(t)&&(t=t.trim()),e.nullify!==!1&&""===t?null:t},capitalize:function(t){return i.isString(t)?t[0].toUpperCase()+t.slice(1):t},pruneEmptyErrors:function(t){return t.filter(function(t){return!i.isEmpty(t.error)})},expandMultipleErrors:function(t){var e=[];return t.forEach(function(t){i.isArray(t.error)?t.error.forEach(function(n){e.push(i.extend({},t,{error:n}))}):e.push(t)}),e},convertErrorMessages:function(t,e){e=e||{};var n=[];return t.forEach(function(t){var r=i.result(t.error,t.value,t.attribute,t.options,t.attributes,t.globalOptions);return i.isString(r)?("^"===r[0]?r=r.slice(1):e.fullMessages!==!1&&(r=i.capitalize(i.prettify(t.attribute))+" "+r),r=r.replace(/\\\^/g,"^"),r=i.format(r,{value:i.stringifyValue(t.value)}),void n.push(i.extend({},t,{error:r}))):void n.push(t)}),n},groupErrorsByAttribute:function(t){var e={};return t.forEach(function(t){var n=e[t.attribute];n?n.push(t):e[t.attribute]=[t]}),e},flattenErrorsToArray:function(t){return t.map(function(t){return t.error}).filter(function(t,e,n){return n.indexOf(t)===e})},cleanAttributes:function(t,e){function n(t,e,n){return i.isObject(t[e])?t[e]:t[e]=!!n||{}}function r(t){var e,r={};for(e in t)t[e]&&i.forEachKeyInKeypath(r,e,n);return r}function o(t,e){if(!i.isObject(t))return t;var n,r,s=i.extend({},t);for(r in t)n=e[r],i.isObject(n)?s[r]=o(s[r],n):n||delete s[r];return s}return i.isObject(e)&&i.isObject(t)?(e=r(e),o(t,e)):{}},exposeModule:function(t,e,n,r,i){n?(r&&r.exports&&(n=r.exports=t),n.validate=t):(e.validate=t,t.isFunction(i)&&i.amd&&i([],function(){return t}))},warn:function(t){"undefined"!=typeof console&&console.warn&&console.warn("[validate.js] "+t)},error:function(t){"undefined"!=typeof console&&console.error&&console.error("[validate.js] "+t)}}),r.validators={presence:function(t,e){if(e=i.extend({},this.options,e),e.allowEmpty?!i.isDefined(t):i.isEmpty(t))return e.message||this.message||"can't be blank"},length:function(t,e,n){if(i.isDefined(t)){e=i.extend({},this.options,e);var r,o=e.is,s=e.maximum,a=e.minimum,u=e.tokenizer||function(t){return t},f=[];t=u(t);var l=t.length;return i.isNumber(l)?(i.isNumber(o)&&l!==o&&(r=e.wrongLength||this.wrongLength||"is the wrong length (should be %{count} characters)",f.push(i.format(r,{count:o}))),i.isNumber(a)&&l<a&&(r=e.tooShort||this.tooShort||"is too short (minimum is %{count} characters)",f.push(i.format(r,{count:a}))),i.isNumber(s)&&l>s&&(r=e.tooLong||this.tooLong||"is too long (maximum is %{count} characters)",f.push(i.format(r,{count:s}))),f.length>0?e.message||f:void 0):(i.error(i.format("Attribute %{attr} has a non numeric value for `length`",{attr:n})),e.message||this.notValid||"has an incorrect length")}},numericality:function(t,e){if(i.isDefined(t)){e=i.extend({},this.options,e);var n,r,o=[],s={greaterThan:function(t,e){return t>e},greaterThanOrEqualTo:function(t,e){return t>=e},equalTo:function(t,e){return t===e},lessThan:function(t,e){return t<e},lessThanOrEqualTo:function(t,e){return t<=e},divisibleBy:function(t,e){return t%e===0}};if(i.isString(t)&&e.strict){var a="^(0|[1-9]\\d*)";if(e.onlyInteger||(a+="(\\.\\d+)?"),a+="$",!new RegExp(a).test(t))return e.message||e.notValid||this.notValid||this.message||"must be a valid number"}if(e.noStrings!==!0&&i.isString(t)&&!i.isEmpty(t)&&(t=+t),!i.isNumber(t))return e.message||e.notValid||this.notValid||this.message||"is not a number";if(e.onlyInteger&&!i.isInteger(t))return e.message||e.notInteger||this.notInteger||this.message||"must be an integer";for(n in s)if(r=e[n],i.isNumber(r)&&!s[n](t,r)){var u="not"+i.capitalize(n),f=e[u]||this[u]||this.message||"must be %{type} %{count}";o.push(i.format(f,{count:r,type:i.prettify(n)}))}return e.odd&&t%2!==1&&o.push(e.notOdd||this.notOdd||this.message||"must be odd"),e.even&&t%2!==0&&o.push(e.notEven||this.notEven||this.message||"must be even"),o.length?e.message||o:void 0}},datetime:i.extend(function(t,e){if(!i.isFunction(this.parse)||!i.isFunction(this.format))throw new Error("Both the parse and format functions needs to be set to use the datetime/date validator");if(i.isDefined(t)){e=i.extend({},this.options,e);var n,r=[],o=e.earliest?this.parse(e.earliest,e):NaN,s=e.latest?this.parse(e.latest,e):NaN;return t=this.parse(t,e),isNaN(t)||e.dateOnly&&t%864e5!==0?(n=e.notValid||e.message||this.notValid||"must be a valid date",i.format(n,{value:arguments[0]})):(!isNaN(o)&&t<o&&(n=e.tooEarly||e.message||this.tooEarly||"must be no earlier than %{date}",n=i.format(n,{value:this.format(t,e),date:this.format(o,e)}),r.push(n)),!isNaN(s)&&t>s&&(n=e.tooLate||e.message||this.tooLate||"must be no later than %{date}",n=i.format(n,{date:this.format(s,e),value:this.format(t,e)}),r.push(n)),r.length?i.unique(r):void 0)}},{parse:null,format:null}),date:function(t,e){return e=i.extend({},e,{dateOnly:!0}),i.validators.datetime.call(i.validators.datetime,t,e)},format:function(t,e){(i.isString(e)||e instanceof RegExp)&&(e={pattern:e}),e=i.extend({},this.options,e);var n,r=e.message||this.message||"is invalid",o=e.pattern;if(i.isDefined(t))return i.isString(t)?(i.isString(o)&&(o=new RegExp(e.pattern,e.flags)),n=o.exec(t),n&&n[0].length==t.length?void 0:r):r},inclusion:function(t,e){if(i.isDefined(t)&&(i.isArray(e)&&(e={within:e}),e=i.extend({},this.options,e),!i.contains(e.within,t))){var n=e.message||this.message||"^%{value} is not included in the list";return i.format(n,{value:t})}},exclusion:function(t,e){if(i.isDefined(t)&&(i.isArray(e)&&(e={within:e}),e=i.extend({},this.options,e),i.contains(e.within,t))){var n=e.message||this.message||"^%{value} is restricted";return i.format(n,{value:t})}},email:i.extend(function(t,e){e=i.extend({},this.options,e);var n=e.message||this.message||"is not a valid email";if(i.isDefined(t))return i.isString(t)&&this.PATTERN.exec(t)?void 0:n},{PATTERN:/^[a-z0-9\u007F-\uffff!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9\u007F-\uffff!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,}$/i}),equality:function(t,e,n,r){if(i.isDefined(t)){i.isString(e)&&(e={attribute:e}),e=i.extend({},this.options,e);var o=e.message||this.message||"is not equal to %{attribute}";if(i.isEmpty(e.attribute)||!i.isString(e.attribute))throw new Error("The attribute must be a non empty string");var s=i.getDeepObjectValue(r,e.attribute),a=e.comparator||function(t,e){return t===e};return a(t,s,e,n,r)?void 0:i.format(o,{attribute:i.prettify(e.attribute)})}},url:function(t,e){if(i.isDefined(t)){e=i.extend({},this.options,e);var n=e.message||this.message||"is not a valid url",r=e.schemes||this.schemes||["http","https"],o=e.allowLocal||this.allowLocal||!1;if(!i.isString(t))return n;var s="^(?:(?:"+r.join("|")+")://)(?:\\S+(?::\\S*)?@)?(?:",a="(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";o?a+="?":s+="(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})",s+="(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*"+a+")(?::\\d{2,5})?(?:[/?#]\\S*)?$";var u=new RegExp(s,"i");return u.exec(t)?void 0:n}}},r.formatters={detailed:function(t){return t},flat:i.flattenErrorsToArray,grouped:function(t){var e;t=i.groupErrorsByAttribute(t);for(e in t)t[e]=i.flattenErrorsToArray(t[e]);return t},constraint:function(t){var e;t=i.groupErrorsByAttribute(t);for(e in t)t[e]=t[e].map(function(t){return t.validator}).sort();return t}},r.exposeModule(r,this,t,e,n)}).call(this,"undefined"!=typeof exports?exports:null,"undefined"!=typeof module?module:null,"undefined"!=typeof define?define:null);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
